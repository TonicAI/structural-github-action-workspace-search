name: 'Structural Workspace Search'
description: 'Searches for workspaces using the Tonic API and returns workspace IDs and names'
branding:
  icon: "search"
  color: "blue"
inputs:
  api_key:
    description: 'Tonic API key'
    required: true
  api_url:
    description: 'Tonic API base URL'
    required: false
    default: 'https://app.tonic.ai'
  search_term:
    description: 'Term to search for in workspace names (optional)'
    required: false
  database_types:
    description: 'Comma-separated list of database types to filter by (optional)'
    required: false
  tags:
    description: 'Comma-separated list of tags to filter by (optional)'
    required: false
  owner_id:
    description: 'Filter workspaces by owner ID (optional)'
    required: false
outputs:
  workspaces_json:
    description: 'JSON string containing workspace IDs and names'
    value: ${{ steps.search-workspaces.outputs.workspaces_json }}
  workspaces_count:
    description: 'Number of workspaces found'
    value: ${{ steps.search-workspaces.outputs.workspaces_count }}
runs:
  using: 'composite'
  steps:
    - name: Search workspaces
      id: search-workspaces
      shell: bash
      run: |
        # Install jq if not available
        if ! command -v jq &> /dev/null; then
          echo "jq is not installed. Attempting to install..."
          if command -v apt-get &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y jq
          elif command -v yum &> /dev/null; then
            sudo yum install -y jq
          elif command -v brew &> /dev/null; then
            brew install jq
          else
            echo "Error: Unable to install jq. Please install it manually." >&2
            exit 1
          fi
        fi

        # Build query string
        query_string="api-version=v2024.01.0"

        # Function to URL encode a string
        urlencode() {
          # Replace special characters, including square brackets
          local string="$1"
          string="${string// /%20}"
          string="${string//[/%5B}"
          string="${string//]/%5D}"
          string="${string//&/%26}"
          string="${string//=/%3D}"
          string="${string//,/%2C}"
          string="${string//?/%3F}"
          string="${string//:/%3A}"
          string="${string//;/%3B}"
          string="${string//+/%2B}"
          string="${string//#/%23}"
          string="${string//%/%25}"
          echo "$string"
        }

        # Add search term if provided
        if [ -n "${{ inputs.search_term }}" ]; then
          encoded_search=$(urlencode "${{ inputs.search_term }}")
          query_string="${query_string}&filters%5Bname%5D=${encoded_search}"
        fi

        # Add database types if provided
        if [ -n "${{ inputs.database_types }}" ]; then
          # Split comma-separated list and add each value to query string
          IFS=',' read -ra DB_TYPES <<< "${{ inputs.database_types }}"
          for db_type in "${DB_TYPES[@]}"; do
            # URL-encode the value
            encoded_db_type=$(urlencode "$db_type")
            query_string="${query_string}&filters%5Bdb_type%5D=${encoded_db_type}"
          done
        fi

        # Add tags if provided
        if [ -n "${{ inputs.tags }}" ]; then
          # Split comma-separated list and add each value to query string
          IFS=',' read -ra TAGS <<< "${{ inputs.tags }}"
          for tag in "${TAGS[@]}"; do
            # URL-encode the value
            encoded_tag=$(urlencode "$tag")
            query_string="${query_string}&filters%5Btag%5D=${encoded_tag}"
          done
        fi

        # Add owner ID if provided
        if [ -n "${{ inputs.owner_id }}" ]; then
          encoded_owner=$(urlencode "${{ inputs.owner_id }}")
          query_string="${query_string}&filters%5Bowner%5D=${encoded_owner}"
        fi

        # Initialize variables for pagination
        page_size=100
        all_workspaces="[]"
        current_page=1
        total_pages=1
        total_count=0

        # Loop through all pages
        while [ $current_page -le $total_pages ]; do
          # Calculate offset for current page
          offset=$(( (current_page - 1) * page_size ))

          # Add pagination parameters to query string
          paged_query="${query_string}&limit=${page_size}&offset=${offset}"

          # For debugging
          echo "Fetching page $current_page (offset $offset, limit $page_size)"
          echo "Query string: $paged_query"

          # Search workspaces using GET method
          response=$(curl -s -X GET \
            "${{ inputs.api_url }}/api/Workspace/search?${paged_query}" \
            -H "Authorization: APIKEY ${{ inputs.api_key }}")

          # Extract total pages from the response
          if [ $current_page -eq 1 ]; then
            total_pages=$(echo "$response" | jq -r '.totalPages // 1')
            total_records=$(echo "$response" | jq -r '.totalRecords // 0')
            echo "Total pages: $total_pages, Total records: $total_records"
          fi

          # Extract workspaces from the response and create a simplified JSON with id and name
          page_workspaces=$(echo "$response" | jq -r '.records | map({id: .id, name: .workspaceName})')

          # Check if we got a valid response
          if [ -z "$page_workspaces" ] || [ "$page_workspaces" = "null" ]; then
            echo "Invalid response. API response: $response" >&2
            break
          fi

          # Get the count of workspaces in this page
          page_count=$(echo "$page_workspaces" | jq -r 'length')

          # Check if we got an empty page (no more results)
          if [ "$page_count" -eq 0 ]; then
            echo "No workspaces found on page $current_page"
            break
          fi

          # Add this page's workspaces to our collection
          if [ $current_page -eq 1 ]; then
            # First page, just use this page's workspaces
            all_workspaces=$page_workspaces
          else
            # Combine with existing workspaces
            all_workspaces=$(echo "$all_workspaces" "$page_workspaces" | jq -s '.[0] + .[1]')
          fi

          # Update count and move to next page
          total_count=$((total_count + page_count))
          current_page=$((current_page + 1))

          echo "Processed page $((current_page - 1)) with $page_count workspace(s)"
        done

        # Use total_records from API if available, otherwise use our count
        if [ -n "$total_records" ] && [ "$total_records" -gt 0 ]; then
          workspaces_count=$total_records
        else
          workspaces_count=$total_count
        fi

        # Format JSON for GitHub Actions output in matrix-ready format
        workspaces_json=$(echo "$all_workspaces" | jq -c '{"workspaces": .}')

        # Set the output variables
        echo "workspaces_json<<EOF" >> $GITHUB_OUTPUT
        echo "$workspaces_json" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        echo "workspaces_count=$workspaces_count" >> $GITHUB_OUTPUT

        echo "Found $workspaces_count workspace(s) across all pages"